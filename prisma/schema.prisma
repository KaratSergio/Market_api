generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  authProviders    AuthProvider[]
  sessionTokens    SessionToken[]
  ads              Ad[]
  comments         Comment[]
  favorites        Favorite[]
  messagesSent     Message[]      @relation("SentMessages")
  messagesReceived Message[]      @relation("ReceivedMessages")
  payments         Payment[]
  tokens           Token[] // Link to Tokens for verification and 2FA

  @@map("users")
}

model AuthProvider {
  id           String  @id @default(uuid())
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  provider     String // 'google', 'github', 'telegram'
  providerId   String  @unique // ID user in OAuth-system
  secret       String? // secret key 2FA
  is2FAEnabled Boolean @default(false)

  @@map("auth_providers")
}

model SessionToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String   @unique
  ip        String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("session_tokens")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Category {
  id        String     @id @default(uuid())
  name      String
  parentId  String?
  parent    Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryHierarchy")
  ads       Ad[]       @relation("AdToCategory")
  subAds    Ad[]       @relation("AdToSubcategory")
  path      Json? // JSON-array with category hierarchy
  createdAt DateTime   @default(now())

  @@map("categories")
}

model Ad {
  id            String     @id @default(uuid())
  title         String
  description   String
  price         Decimal
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  category      Category   @relation("AdToCategory", fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String
  subcategory   Category?  @relation("AdToSubcategory", fields: [subcategoryId], references: [id], onDelete: Cascade)
  subcategoryId String?
  status        AdStatus   @default(PENDING)
  location      String?
  views         Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  images        AdImage[]
  comments      Comment[]
  favorites     Favorite[]
  payments      Payment[]

  @@map("ads")
}

enum AdStatus {
  ACTIVE
  PENDING
  REJECTED
  SOLD
}

model AdImage {
  id   String @id @default(uuid())
  url  String
  ad   Ad     @relation(fields: [adId], references: [id], onDelete: Cascade)
  adId String

  @@map("ad_images")
}

model Favorite {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  ad     Ad     @relation(fields: [adId], references: [id], onDelete: Cascade)
  adId   String

  @@map("favorites")
}

model Comment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  ad        Ad       @relation(fields: [adId], references: [id], onDelete: Cascade)
  adId      String
  text      String
  createdAt DateTime @default(now())

  @@map("comments")
}

model Message {
  id         String   @id @default(uuid())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  text       String
  createdAt  DateTime @default(now())

  @@map("messages")
}

model Payment {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  ad        Ad            @relation(fields: [adId], references: [id], onDelete: Cascade)
  adId      String
  amount    Decimal
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Token {
  id        String    @id @default(uuid())
  email     String
  token     String    @unique
  type      TokenType
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")

  // Foreign key to User for verification or reset requests
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

enum TokenType {
  REFRESH
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}
