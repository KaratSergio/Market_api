// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(uuid())
  email            String     @unique
  password         String
  name             String?
  phone            String?
  avatar           String?
  role             Role       @default(USER)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  refreshToken     String?
  ads              Ad[]
  comments         Comment[]
  favorites        Favorite[]
  messagesSent     Message[]  @relation("SentMessages")
  messagesReceived Message[]  @relation("ReceivedMessages")
  Payment          Payment[]
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Category {
  id            String     @id @default(uuid())
  name          String
  parentId      String?
  parent        Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryParent")
  ads           Ad[]       @relation("AdToCategory")
  subAds        Ad[]       @relation("AdToSubcategory")
  createdAt     DateTime   @default(now())
}

model Ad {
  id            String     @id @default(uuid())
  title         String
  description   String
  price         Decimal
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  category      Category   @relation("AdToCategory", fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String
  subcategory   Category?  @relation("AdToSubcategory", fields: [subcategoryId], references: [id], onDelete: Cascade)
  subcategoryId String?
  status        AdStatus   @default(PENDING)
  location      String?
  views         Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  images        AdImage[]
  comments      Comment[]
  favorites     Favorite[]
  Payment       Payment[]
}

enum AdStatus {
  ACTIVE
  PENDING
  REJECTED
  SOLD
}

model AdImage {
  id   String @id @default(uuid())
  url  String
  ad   Ad     @relation(fields: [adId], references: [id], onDelete: Cascade)
  adId String
}

model Favorite {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  ad     Ad     @relation(fields: [adId], references: [id], onDelete: Cascade)
  adId   String
}

model Comment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  ad        Ad       @relation(fields: [adId], references: [id], onDelete: Cascade)
  adId      String
  text      String
  createdAt DateTime @default(now())
}

model Message {
  id         String   @id @default(uuid())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  text       String
  createdAt  DateTime @default(now())
}

model Payment {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  ad        Ad            @relation(fields: [adId], references: [id], onDelete: Cascade)
  adId      String
  amount    Decimal
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
